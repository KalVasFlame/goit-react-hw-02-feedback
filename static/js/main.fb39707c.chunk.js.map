{"version":3,"sources":["components/Section.js","components/Statistics.js","components/FeedbackOptions.js","App.js","reportWebVitals.js","index.js"],"names":["Section","title","children","console","log","className","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","onGood","onNeutral","onBad","type","onClick","App","useState","setGood","setBad","setNeutral","Math","round","onBtnCLick","name","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAeeA,EAZC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAGzB,OAFCC,QAAQC,IAAIF,GAEL,sBAAKG,UAAU,YAAf,UACL,oBAAIA,UAAU,WAAd,SAA0BJ,IACzBC,MCMUI,EAZI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAIC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,mBAA7B,OACjB,mCAEM,qBAAIN,UAAU,iBAAd,UACE,qBAAIA,UAAU,iBAAd,mBAAuCE,KACvC,qBAAIF,UAAU,iBAAd,sBAA0CG,KAC1C,qBAAIH,UAAU,iBAAd,kBAAqCI,EAArC,OACA,yCAAYC,KACV,qDAAwBC,WCArBC,EARS,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,UAAWC,EAArB,EAAqBA,MAArB,OAClB,gCACE,wBAAQV,UAAU,WAAWW,KAAK,SAASC,QAASJ,EAApD,kBACA,wBAAQR,UAAU,cAAcW,KAAK,SAASC,QAASH,EAAvD,qBACA,wBAAQT,UAAU,UAAUW,KAAK,SAASC,QAASF,EAAnD,qB,MCEO,SAASG,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOZ,EAAP,KAAaa,EAAb,KACA,EAAsBD,mBAAS,GAA/B,mBAAOV,EAAP,KAAYY,EAAZ,KACA,EAA8BF,mBAAS,GAAvC,mBAAOX,EAAP,KAAgBc,EAAhB,KAEMX,EAAqBY,KAAKC,MAAOjB,GAAQA,EAAOC,EAAUC,GAAQ,KAClEC,EAAQH,EAAOC,EAAUC,EAEzBgB,EAAa,SAACC,GAAD,OAAU,WAC3B,OAAQA,GACN,IAAK,OACH,OAAON,GAAQ,SAACO,GAAD,OAAUA,EAAO,KAClC,IAAK,MACH,OAAON,GAAO,SAACM,GAAD,OAAUA,EAAO,KACjC,IAAK,UACH,OAAOL,GAAW,SAACK,GAAD,OAAUA,EAAO,QAOzC,OACE,qCACE,cAAC,EAAD,CAAS1B,MAAO,wBAAhB,SACE,cAAC,EAAD,CAAiBY,OAAQY,EAAW,QAASX,UAAWW,EAAW,WAAYV,MAAOU,EAAW,WAEnG,cAAC,EAAD,CAASxB,MAAO,aAAhB,SACGS,EAAQ,EACP,cAAC,EAAD,CAAYH,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKC,MAAOA,EAAOC,mBAAoBA,IAEtF,yDCvCV,IAYeiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.fb39707c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Section = ({ title, children }) => {\r\n  console.log(children);\r\n\r\n return (<div className='container'>\r\n    <h2 className='feedback'>{title}</h2>\r\n    {children}\r\n  </div>)\r\n  \r\n}\r\n    \r\n  \r\n\r\nexport default Section","import React from 'react'\r\n\r\nconst Statistics = ({ good, neutral, bad,total, positivePercentage}) =>\r\n  <>\r\n        \r\n        <ul className='statistic-list'>\r\n          <li className='statistic-item'>Good: { good }</li>\r\n          <li className='statistic-item'>Neutral: { neutral }</li>\r\n          <li className='statistic-item'>Bad: {bad} </li>\r\n          <li>Total: {total}</li>\r\n            <li>Positive feedback: {positivePercentage}</li>\r\n        </ul>\r\n    </>\r\n\r\nexport default Statistics","import React from 'react'\r\n\r\nconst FeedbackOptions = ({onGood, onNeutral, onBad}) =>\r\n      <div>\r\n        <button className='btn-good' type='button' onClick={onGood}>Good</button>\r\n        <button className='btn-neutral' type='button' onClick={onNeutral}>Neutral</button>\r\n        <button className='btn-bad' type='button' onClick={onBad} >Bad</button>\r\n  </div>\r\n      \r\n      \r\nexport default FeedbackOptions","import { useState } from \"react\"\n\nimport Section from \"./components/Section\"\nimport Statistics from \"./components/Statistics\"\nimport FeedbackOptions from \"./components/FeedbackOptions\"\n\nimport \"./App.css\"\n\nexport default function App() {\n  const [good, setGood] = useState(0)\n  const [bad, setBad] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n\n  const positivePercentage = Math.round((good / (good + neutral + bad)) * 100)\n  const total = good + neutral + bad\n\n  const onBtnCLick = (name) => () => {\n    switch (name) {\n      case \"good\":\n        return setGood((prev) => prev + 1)\n      case \"bad\":\n        return setBad((prev) => prev + 1)\n      case \"neutral\":\n        return setNeutral((prev) => prev + 1)\n\n      default:\n        break\n    }\n  }\n\n  return (\n    <>\n      <Section title={\"Please leave feedback\"}>\n        <FeedbackOptions onGood={onBtnCLick(\"good\")} onNeutral={onBtnCLick(\"neutral\")} onBad={onBtnCLick(\"bad\")} />\n      </Section>\n      <Section title={\"Statistics\"}>\n        {total > 0 ? (\n          <Statistics good={good} neutral={neutral} bad={bad} total={total} positivePercentage={positivePercentage} />\n        ) : (\n          <h3>not given feedback</h3>\n        )}\n      </Section>\n    </>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}