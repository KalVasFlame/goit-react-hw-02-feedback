{"version":3,"sources":["components/Section.js","components/Statistics.js","components/FeedbackOptions.js","App.js","reportWebVitals.js","index.js"],"names":["Section","title","children","console","log","className","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","onGood","onNeutral","onBad","type","onClick","App","state","onBtnCLick","name","setState","prev","this","Math","round","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAeeA,EAZC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAGzB,OAFCC,QAAQC,IAAIF,GAEL,sBAAKG,UAAU,YAAf,UACL,oBAAIA,UAAU,WAAd,SAA0BJ,IACzBC,MCMUI,EAZI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAIC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,mBAA7B,OACjB,mCAEM,qBAAIN,UAAU,iBAAd,UACE,qBAAIA,UAAU,iBAAd,mBAAuCE,KACvC,qBAAIF,UAAU,iBAAd,sBAA0CG,KAC1C,qBAAIH,UAAU,iBAAd,kBAAqCI,EAArC,OACA,yCAAYC,KACV,qDAAwBC,WCArBC,G,MARS,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,UAAWC,EAArB,EAAqBA,MAArB,OAClB,gCACE,wBAAQV,UAAU,WAAWW,KAAK,SAASC,QAASJ,EAApD,kBACA,wBAAQR,UAAU,cAAcW,KAAK,SAASC,QAASH,EAAvD,qBACA,wBAAQT,UAAU,UAAUW,KAAK,SAASC,QAASF,EAAnD,sBC+COG,E,4MAvCbC,MAAQ,CACNZ,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGTW,WAAa,SAACC,GAAD,OAAU,WACnB,EAAKC,UAAS,SAAAC,GAAI,sBACfF,EAAOE,EAAKF,GAAQ,Q,4CAMzB,WACF,MAA+BG,KAAKL,MAA5BZ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACbE,EAAqBc,KAAKC,MAAMnB,GAAQA,EAAOC,EAAUC,GAAO,KAChEC,EAAQH,EAAOC,EAAUC,EAC/B,OACE,qCACE,cAAC,EAAD,CAASR,MAAO,wBAAhB,SACE,cAAC,EAAD,CAAiBY,OAAQW,KAAKJ,WAAW,QACvCN,UAAWU,KAAKJ,WAAW,WAC3BL,MAAOS,KAAKJ,WAAW,WAE3B,cAAC,EAAD,CAASnB,MAAO,aAAhB,SACGS,EAAM,EAAG,cAAC,EAAD,CAAYH,KAAMA,EAC1BC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,IACjB,6D,GAjCGgB,aCAHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.daefb195.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Section = ({ title, children }) => {\r\n  console.log(children);\r\n\r\n return (<div className='container'>\r\n    <h2 className='feedback'>{title}</h2>\r\n    {children}\r\n  </div>)\r\n  \r\n}\r\n    \r\n  \r\n\r\nexport default Section","import React from 'react'\r\n\r\nconst Statistics = ({ good, neutral, bad,total, positivePercentage}) =>\r\n  <>\r\n        \r\n        <ul className='statistic-list'>\r\n          <li className='statistic-item'>Good: { good }</li>\r\n          <li className='statistic-item'>Neutral: { neutral }</li>\r\n          <li className='statistic-item'>Bad: {bad} </li>\r\n          <li>Total: {total}</li>\r\n            <li>Positive feedback: {positivePercentage}</li>\r\n        </ul>\r\n    </>\r\n\r\nexport default Statistics","import React from 'react'\r\n\r\nconst FeedbackOptions = ({onGood, onNeutral, onBad}) =>\r\n      <div>\r\n        <button className='btn-good' type='button' onClick={onGood}>Good</button>\r\n        <button className='btn-neutral' type='button' onClick={onNeutral}>Neutral</button>\r\n        <button className='btn-bad' type='button' onClick={onBad} >Bad</button>\r\n  </div>\r\n      \r\n      \r\nexport default FeedbackOptions","import React, { Component } from 'react';\nimport Section from './components/Section';\nimport Statistics from './components/Statistics';\n\n\n\nimport './App.css';\nimport FeedbackOptions from './components/FeedbackOptions';\n\n\n\n\nclass App extends Component {\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\nonBtnCLick = (name) => () => {\n    this.setState(prev => ({\n      [name]: prev[name] + 1,\n    }))\n  };\n  \n\n\n  render() {\nconst { good, neutral, bad } = this.state;\n    const positivePercentage = Math.round(good / (good + neutral + bad) * 100);\n    const total = good + neutral + bad;\n    return (\n      <>\n        <Section title={'Please leave feedback'}>\n          <FeedbackOptions onGood={this.onBtnCLick('good')}\n            onNeutral={this.onBtnCLick('neutral')}\n            onBad={this.onBtnCLick('bad')} />\n        </ Section >\n        <Section title={'Statistics'}>\n          {total>0? <Statistics good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positivePercentage}\n          /> : <h3>not given feedback</h3>}\n        </ Section  >\n      </>\n    );\n  }\n};\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}